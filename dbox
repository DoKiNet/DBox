#!/bin/bash

ARG1=$1
ARG2=$2
VERSION="0.1"
BUILD="0.1.15"
ARCH="" #i386 || amd64 || arm64 || armhf  uname -m

containerExists(){
    CONTAINER_LIST=$(lxc-ls --line)
    RET="false"

    for line in $CONTAINER_LIST;  do
        if [ "$line" == "$ARG2" ]; then
                RET="true"
        fi
    done

echo $RET
}




if [ "$(uname -m)" == "x86_64" ]; then
    ARCH="amd64"
fi


if [[ $EUID -ne 0 ]]; then
    echo "DBox requires root privileges"
    exit 1
fi


if [ "$ARG1" == "install" ] && [ "$ARG2" == "server" ]; then
source /etc/os-release

        ######## DEBIAN 10 INSTALLATION ############
    if [ "$ID" == "debian" ] && [ "$VERSION_ID" == "10" ]; then
        echo -e "\nDebian 10 - DBox Installation"
        sleep 1

        apt -y install lxc

        cat > /etc/lxc/default.conf << EOF
lxc.net.0.type = veth
lxc.net.0.link = virbr0
lxc.net.0.flags = up
lxc.apparmor.profile = generated
lxc.apparmor.allow_nesting = 1
EOF

        apt install -y libvirt-clients libvirt-daemon-system iptables ebtables dnsmasq-base
        virsh net-start default
        virsh net-autostart default

        echo -e "\nDBOX SERVER - INSTALLED"
        $0 install client

        ######## END DEBIAN 10 INSTALLATION ############


        ######## DEBIAN 9 INSTALLATION ############
    elif [ "$ID" == "debian" ] && [ "$VERSION_ID" == "9" ]; then
        echo -e "\nDebian 9 - DBox Installation\n"
        sleep 1

        apt -y install lxc
        touch /etc/default/lxc-net
        echo -n 'USE_LXC_BRIDGE="true"' > /etc/default/lxc-net

        cat > /etc/lxc/default.conf << EOF
lxc.network.type = veth
lxc.network.link = lxcbr0
lxc.network.flags = up
lxc.network.hwaddr = 00:16:3e:xx:xx:xx
EOF

        service lxc-net restart

        echo -e "\nDBOX SERVER - INSTALLED"
        $0 install client

        ######## END DEBIAN 9 INSTALLATION ############

    else
        echo "OS NOT SUPPORTED"
    fi

elif [ "$ARG1" == "install" ] && [ "$ARG2" == "client" ]; then
    cp ./dbox /bin/dbox
	chown root:root /bin/dbox
	chmod 770 /bin/dbox

    mkdir -p /etc/dbox

    if [ -f "/etc/dbox/portmappings" ]; then
        echo "File /etc/dbox/portmappings already exists"
    else
        touch /etc/dbox/portmappings
        chmod 755 /etc/dbox/portmappings
        echo -e "#!/bin/bash\n\n" > /etc/dbox/portmappings
    fi

    if [ -f "/etc/rc.local" ]; then
        sed -i '1 a /etc/dbox/portmappings' /etc/rc.local
    else
        touch /etc/rc.local
        chmod 755 /etc/rc.local
        echo -e "#!/bin/bash\n\n" > /etc/rc.local
        echo "/etc/dbox/portmappings" >> /etc/rc.local
    fi

	echo -e "\nDBOX CLIENT - INSTALLED"
    echo -e "\n"

elif [ "$ARG1" == "uninstall" ] && [ "$ARG2" == "client" ]; then
    rm /bin/dbox
	echo -e "\nDBOX CLIENT - UNINSTALLED"

elif [ "$ARG1" == "create" ] && [ "$ARG2" != "" ]; then
    if [ "ARCH" == "" ]; then
        echo -e "\nCPU ARCHITECTURE NOT SUPPORTED\n"
        exit
    fi
    echo -ne "\nContainer Name: "
    read CONTAINER_NAME
    echo -e "\n"

    if [ "$ARG2" == "debian10" ]; then
        lxc-create -n $CONTAINER_NAME -t debian -- -r buster -a $ARCH
        echo -e "\n"
        echo -e "$CONTAINER_NAME CREATED\n"
    elif [ "$ARG2" == "debian9" ]; then
        lxc-create -n $CONTAINER_NAME -t debian -- -r stretch -a $ARCH
        echo -e "\n"
        echo -e "$CONTAINER_NAME CREATED\n"
    elif [ "$ARG2" == "ubuntu1804" ]; then
        lxc-create -t download -n $CONTAINER_NAME -- -d ubuntu -r bionic -a $ARCH
        echo -e "\n"
        echo -e "$CONTAINER_NAME CREATED\n"
    else
        echo -e "TEMPLATE: $ARG2  NOT EXISTS\n"
        $0 list templates
    fi

elif [ "$ARG1" == "add" ] && [ "$ARG2" == "portmap" ]; then
    dbox list containers
    HOST_PORT=""
    CONTAINER_IP=""
    CONTAINER_PORT=""
    PROTOCOL="" #tcp or udp
    echo -n "HOST PORT: "
    read HOST_PORT
    echo -n "CONTAINER IP: "
    read CONTAINER_IP
    echo -n "CONTAINER PORT: "
    read CONTAINER_PORT
    echo -n "PROTOCOL: "
    read PROTOCOL

    cat >> /etc/dbox/portmappings << EOF
#BOB_PORTMAPPING_$HOST_PORT -> $CONTAINER_IP:$CONTAINER_PORT
iptables -t nat -A PREROUTING -p $PROTOCOL -m $PROTOCOL --dport $HOST_PORT -j DNAT --to-destination $CONTAINER_IP:$CONTAINER_PORT
iptables -t nat -A OUTPUT -o lo -p $PROTOCOL -m multiport --dports $HOST_PORT -j DNAT --to-destination $CONTAINER_IP:$CONTAINER_PORT
#EOB_PORTMAPPING_$HOST_PORT

EOF
    /bin/bash /etc/dbox/portmappings


elif [ "$ARG1" == "del" ] && [ "$ARG2" == "portmap" ]; then
    echo "ciao"

elif [ "$ARG1" == "list" ] && [ "$ARG2" == "portmap" -o "$ARG2" == "portmaps" ]; then
    echo "ciao"

elif [ "$ARG1" == "list" ] && [ "$ARG2" == "" ]; then
    $0 list containers


elif [ "$ARG1" == "list" ] && [ "$ARG2" == "containers" ]; then
    echo -e "\n"
    lxc-ls --fancy
    echo -e "\n"

elif [ "$ARG1" == "list" ] && [ "$ARG2" == "templates" ]; then
    echo -e "\n  - debian10"
    echo -e "  - debian9"
    echo -e "  - ubuntu1804"
    echo -e "\n"

elif [ "$ARG1" == "start" ]; then
    if [ "$ARG2" != "" ] && [ "$(containerExists)" == "true" ]; then
        lxc-start -n $ARG2

    else
        echo -e "\n"
        lxc-ls --fancy
        echo -e "\n"
    fi

elif [ "$ARG1" == "stop" ]; then
    if [ "$ARG2" != "" ] && [ "$(containerExists)" == "true" ] ; then
        lxc-stop -n $ARG2

    else
        echo -e "\n"
        lxc-ls --fancy
        echo -e "\n"
    fi

elif [ "$ARG1" == "connect" ]; then
    if [ "$ARG2" != "" ] && [ "$(containerExists)" == "true" ]; then
        lxc-attach -n $ARG2

    else
        echo -e "\n"
        lxc-ls --fancy
        echo -e "\n"
    fi


elif [ "$ARG1" == "delete" ]; then
    if [ "$ARG2" != "" ] && [ $(containerExists) == "true" ]; then
        echo -e "\n"
        lxc-destroy -sf -n $ARG2
        echo -e "\n"

    else
        echo -e "\n"
        lxc-ls --fancy
        echo -e "\n"
    fi

else
    echo -e "\nDBox - Version: $VERSION\n"
    echo -e "Easy tool to quickly manage lxc containers by command line\n"
fi
